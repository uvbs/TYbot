/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_asus_control_ControlAPI */

#ifndef _Included_com_asus_control_ControlAPI
#define _Included_com_asus_control_ControlAPI
#ifdef __cplusplus
extern "C" {
#endif
#undef com_asus_control_ControlAPI_INITAIAL
#define com_asus_control_ControlAPI_INITAIAL 0L
#undef com_asus_control_ControlAPI_BASECONTROL
#define com_asus_control_ControlAPI_BASECONTROL 1L
#undef com_asus_control_ControlAPI_NECKCONTROL
#define com_asus_control_ControlAPI_NECKCONTROL 4L
#undef com_asus_control_ControlAPI_SPECIFICCONTROL
#define com_asus_control_ControlAPI_SPECIFICCONTROL 80L
#undef com_asus_control_ControlAPI_REQUESTENSORTYPE
#define com_asus_control_ControlAPI_REQUESTENSORTYPE 8L
/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeSetControlParameter
 * Signature: ([I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_asus_control_ControlAPI_NativeSetControlParameter
  (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeSendCommand
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeSendCommand
        (JNIEnv *, jobject, jint, jint, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeWheelSpdCtrl
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeWheelSpdCtrl
        (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    getStatus
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_com_asus_control_ControlAPI_getStatus
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    getSensorRAWData
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_com_asus_control_ControlAPI_getSensorRAWData
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeReloadMapFile
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeReloadMapFile
  (JNIEnv *, jobject);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeControlNeckJoint
 * Signature: ([I)Ljava/lang/String;
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeControlNeckJoint
        (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeCtrlVelNeckJoint
 * Signature: ([I)Ljava/lang/String;
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeCtrlTrkNeckJoint
        (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativePointSmooth
 * Signature: ([I)Ljava/lang/String;
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativePointSmooth
        (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeControlNeckSpecificAction
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeControlNeckSpecificAction
        (JNIEnv *, jobject, jint);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeRelMoveTo
 * Signature: ([I)Ljava/lang/String;
 */
JNIEXPORT jint JNICALL Java_com_asus_control_ControlAPI_NativeRelMoveTo
  (JNIEnv *, jobject, jint, jint, jintArray);

/*
 * Class:     com_asus_control_ControlAPI
 * Method:    NativeGoFromAToB
 * Signature: ([I[I)Ljava/lang/String;
 */
JNIEXPORT jintArray JNICALL Java_com_asus_control_ControlAPI_NativeGoFromAToB
  (JNIEnv *, jobject, jintArray, jintArray);

#ifdef __cplusplus
}
#endif
#endif
